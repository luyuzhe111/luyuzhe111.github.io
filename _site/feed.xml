<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-12-05T16:40:20-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2021/10/16/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2021-10-16T16:52:39-05:00</published><updated>2021-10-16T16:52:39-05:00</updated><id>http://localhost:4000/jekyll/update/2021/10/16/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2021/10/16/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&amp;gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/docs/jekyll/update/2021/10/16/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2021-10-16T01:07:13-05:00</published><updated>2021-10-16T01:07:13-05:00</updated><id>http://localhost:4000/docs/jekyll/update/2021/10/16/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/docs/jekyll/update/2021/10/16/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="docs" /><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&amp;gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.</summary></entry><entry><title type="html">Recast</title><link href="http://localhost:4000/papers/recast" rel="alternate" type="text/html" title="Recast" /><published>2020-01-08T00:00:00-06:00</published><updated>2020-01-08T00:00:00-06:00</updated><id>http://localhost:4000/papers/recast</id><content type="html" xml:base="http://localhost:4000/papers/recast">&lt;h1 id=&quot;recast-interactive-auditing-of-automatic-toxicity-detection-models&quot;&gt;RECAST: Interactive Auditing of Automatic Toxicity Detection Models&lt;/h1&gt;
&lt;p&gt;

  
    
&lt;a href=&quot;http://austinpwright.com&quot;&gt;Austin P. Wright&lt;/a&gt;,
  

  
    
&lt;a href=&quot;http://oshaikh.com/&quot;&gt;Omar Shaikh&lt;/a&gt;,
  

  
    
&lt;a href=&quot;https://haekyu.com&quot;&gt;Haekyu Park&lt;/a&gt;,
  

  
    
&lt;a href=&quot;http://www.willepperson.com&quot;&gt;Will Epperson&lt;/a&gt;,
  

  
    
Muhammed Ahmed,
  

  
    
Stephane Pinel,
  

  
    
&lt;a href=&quot;https://www.cc.gatech.edu/~dyang888/&quot;&gt;Diyi Yang&lt;/a&gt;,
  

  
    
&lt;a href=&quot;https://www.cc.gatech.edu/~dchau&quot;&gt;Duen Horng (Polo) Chau&lt;/a&gt;
  

&lt;/p&gt;

&lt;figure&gt;
    &lt;img class=&quot;single&quot; src=&quot;/images/papers/20-recast-chi.png&quot; /&gt;
    &lt;figcaption class=&quot;single&quot;&gt;
      A: RECAST consists of a textbox and a radial progress bar. A color change on the radial progress, along with a score, indicate the toxicity of a sentence. 
Toxicity ranges from white (non-toxic) to red (very toxic). Users can hover over options to preview toxicity scores for replacing the selected word in the sentence. 
B: upon replacing the word (in the case of this figure, replacing “idiotic” with “nonsensical”), the main radial progress bar reflects the reduced toxicity score. 
However the small attention on the other pejorative word &quot;moron&quot; compared to &quot;video&quot; in the alternative version shows the idiosyncrasies of the model and underlying dataset.


    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;As toxic language becomes nearly pervasive online, there has been increasing interest in leveraging the advancements in natural language processing (NLP) to automatically detect and remove toxic comments. 
Despite fairness concerns and limited interpretability, there is currently little work for auditing these systems in particular for end users. 
We present our ongoing work, RECAST, an interactive tool for auditing toxicity detection models by visualizing explanations for predictions and providing alternative wordings for detected toxic speech. 
RECAST displays the attention of toxicity detection models on user input, and provides an intuitive system for rewording impactful language within a comment with less toxic alternative words close in embedding space. 
Finally we propose a larger user study  of RECAST, with promising preliminary results, to validate it’s effectiveness and useability with end users.&lt;/p&gt;

&lt;h2 id=&quot;citation&quot;&gt;Citation&lt;/h2&gt;
&lt;p&gt;

	&lt;strong&gt;RECAST: Interactive Auditing of Automatic Toxicity Detection Models&lt;/strong&gt;


&lt;br /&gt;


	
		
&lt;a href=&quot;http://austinpwright.com&quot;&gt;Austin P. Wright&lt;/a&gt;,
	

	
		
&lt;a href=&quot;http://oshaikh.com/&quot;&gt;Omar Shaikh&lt;/a&gt;,
	

	
		
&lt;a href=&quot;https://haekyu.com&quot;&gt;Haekyu Park&lt;/a&gt;,
	

	
		
&lt;a href=&quot;http://www.willepperson.com&quot;&gt;Will Epperson&lt;/a&gt;,
	

	
		
Muhammed Ahmed,
	

	
		
Stephane Pinel,
	

	
		
&lt;a href=&quot;https://www.cc.gatech.edu/~dyang888/&quot;&gt;Diyi Yang&lt;/a&gt;,
	

	
		
&lt;a href=&quot;https://www.cc.gatech.edu/~dchau&quot;&gt;Duen Horng (Polo) Chau&lt;/a&gt;
	


&lt;br /&gt;


&lt;span class=&quot;cv-description&quot;&gt;
	RECAST is an interactive tool that allows users to audit toxicity detection models with their own input text and suggests alternative wordings for detected toxic speech.
&lt;/span&gt;
&lt;br /&gt;


&lt;i&gt;The eighth International Workshop of Chinese CHI.  2020.&lt;/i&gt;

&lt;br /&gt;


	&lt;span class=&quot;pub-misc&quot;&gt;

	

	
	  &lt;a href=&quot;/papers/recast&quot;&gt;
	    &lt;i class=&quot;fas fa-link&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Project
	  &lt;/a&gt;
	

	

	
	  &lt;a href=&quot;https://arxiv.org/pdf/2001.01819.pdf&quot;&gt;
	    &lt;i class=&quot;far fa-file-pdf&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; PDF
	  &lt;/a&gt;
	

	

	

	

	

	

	

	

	

	

	

	
		
		
	

	

	
	
	&lt;/span&gt;







&lt;/p&gt;

&lt;!-- ## BibTeX
```
@article{wright2020recast,
title={RECAST: Interactive Auditing of Automatic Toxicity Detection Models},
author={Austin P. Wright and Omar Shaikh and Haekyu Park and Will Epperson and Muhammed Ahmed and Stephane Pinel and Diyi Yang and Duen Horng (Polo) Chau},
year={2020},
eprint={2001.01819},
archivePrefix={arXiv},
primaryClass={cs.CL}
}

``` --&gt;</content><author><name></name></author><category term="papers" /><summary type="html"></summary></entry><entry><title type="html">Fairvis</title><link href="http://localhost:4000/papers/fairvis" rel="alternate" type="text/html" title="Fairvis" /><published>2019-10-15T00:00:00-05:00</published><updated>2019-10-15T00:00:00-05:00</updated><id>http://localhost:4000/papers/fairvis</id><content type="html" xml:base="http://localhost:4000/papers/fairvis">&lt;h1 id=&quot;fairvis-visual-analytics-for-discovering-intersectional-bias-in-machine-learning&quot;&gt;FairVis: Visual Analytics for Discovering Intersectional Bias in Machine Learning&lt;/h1&gt;
&lt;p&gt;

  
    
&lt;a href=&quot;http://cabreraalex.com&quot;&gt;Angel Cabrera&lt;/a&gt;,
  

  
    
&lt;a href=&quot;http://www.willepperson.com&quot;&gt;Will Epperson&lt;/a&gt;,
  

  
    
&lt;a href=&quot;https://fredhohman.com&quot;&gt;Fred Hohman&lt;/a&gt;,
  

  
    
&lt;a href=&quot;https://minsuk.com&quot;&gt;Minsuk Kahng&lt;/a&gt;,
  

  
    
&lt;a href=&quot;http://jamiemorgenstern.com&quot;&gt;Jamie Morgenstern&lt;/a&gt;,
  

  
    
&lt;a href=&quot;https://www.cc.gatech.edu/~dchau&quot;&gt;Duen Horng (Polo) Chau&lt;/a&gt;
  

&lt;/p&gt;

&lt;figure&gt;
    &lt;img class=&quot;single&quot; src=&quot;/images/papers/19-fairvis-vast.png&quot; /&gt;
    &lt;figcaption class=&quot;single&quot;&gt;
      FairVis integrates multiple coordinated views for discovering intersectional bias. 
Above, our user investigates the intersectional subgroups of &lt;i&gt;sex&lt;/i&gt; and &lt;i&gt;race&lt;/i&gt;. 
A. The Feature Distribution View allows users to visualize each feature's distribution and generate subgroups.
B. The Subgroup Overview lets users select various fairness metrics to see the global average per metric and compare subgroups to one another, e.g., pinned Caucasian Males versus hovered African-American Males.
The plots for &lt;i&gt;Recall&lt;/i&gt; and &lt;i&gt;False Positive Rate&lt;/i&gt; show that for African-American Males, the model has relatively high recall but also the highest false positive rate out of all subgroups of sex and race. 
C. The Detailed Comparison View lets users compare the details of two groups and investigate their class balances.
Since the difference in False Positive Rates between Caucasian Males and African-American Males is far larger than their difference in base rates, a user suspects this part of the model merits further inquiry. 
D. The Suggested and Similar Subgroup View shows suggested subgroups ranked by the worst performance in a given metric. 


    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The growing capability and accessibility of machine learning has led to its application to many real-world domains and data about people.
Despite the benefits algorithmic systems may bring, models can reflect, inject, or exacerbate implicit and explicit societal biases into their outputs, disadvantaging certain demographic subgroups.
Discovering which biases a machine learning model has introduced is a great challenge, due to the numerous definitions of fairness and the large number of potentially impacted subgroups.
We present FairVis, a mixed-initiative visual analytics system that integrates a novel subgroup discovery technique for users to audit the fairness of machine learning models.
Through FairVis, users can apply domain knowledge to generate and investigate known subgroups, and explore suggested and similar subgroups.
FairVis’ coordinated views enable users to explore a high-level overview of subgroup performance and subsequently drill down into detailed investigation of specific subgroups.
We show how FairVis helps to discover biases in two real datasets used in predicting income and recidivism.
As a visual analytics system devoted to discovering bias in machine learning, FairVis demonstrates how interactive visualization may help data scientists and the general public understand and create more equitable algorithmic systems.&lt;/p&gt;

&lt;h2 id=&quot;citation&quot;&gt;Citation&lt;/h2&gt;
&lt;p&gt;

	&lt;strong&gt;FairVis: Visual Analytics for Discovering Intersectional Bias in Machine Learning&lt;/strong&gt;


&lt;br /&gt;


	
		
&lt;a href=&quot;http://cabreraalex.com&quot;&gt;Angel Cabrera&lt;/a&gt;,
	

	
		
&lt;a href=&quot;http://www.willepperson.com&quot;&gt;Will Epperson&lt;/a&gt;,
	

	
		
&lt;a href=&quot;https://fredhohman.com&quot;&gt;Fred Hohman&lt;/a&gt;,
	

	
		
&lt;a href=&quot;https://minsuk.com&quot;&gt;Minsuk Kahng&lt;/a&gt;,
	

	
		
&lt;a href=&quot;http://jamiemorgenstern.com&quot;&gt;Jamie Morgenstern&lt;/a&gt;,
	

	
		
&lt;a href=&quot;https://www.cc.gatech.edu/~dchau&quot;&gt;Duen Horng (Polo) Chau&lt;/a&gt;
	


&lt;br /&gt;


&lt;span class=&quot;cv-description&quot;&gt;
	FairVis is a Visual Analytics system that allows users to audit their machine learning models for intersectional bias by exploring the model's performance on various user-specified and reccomended subgroups in a dataset.
&lt;/span&gt;
&lt;br /&gt;


&lt;i&gt;IEEE Conference on Visual Analytics Science and Technology (VAST). Vancouver, Canada, 2019.&lt;/i&gt;

&lt;br /&gt;


	&lt;span class=&quot;pub-misc&quot;&gt;

	

	
	  &lt;a href=&quot;/papers/fairvis&quot;&gt;
	    &lt;i class=&quot;fas fa-link&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Project
	  &lt;/a&gt;
	

	
	&lt;a href=&quot;https://poloclub.github.io/FairVis/&quot;&gt;
		&lt;i class=&quot;fas fa-play&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Demo
	&lt;/a&gt;
	

	
	  &lt;a href=&quot;https://arxiv.org/abs/1904.05419&quot;&gt;
	    &lt;i class=&quot;far fa-file-pdf&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; PDF
	  &lt;/a&gt;
	

	
	  &lt;a href=&quot;https://medium.com/@cabreraalex/fairvis-discovering-bias-in-machine-learning-using-visual-analytics-acbd362a3e2f&quot;&gt;
	    &lt;i class=&quot;fas fa-newspaper&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Blog
	  &lt;/a&gt;
	

	

	

	

	
	&lt;a href=&quot;https://vimeo.com/368702211&quot;&gt;
		&lt;i class=&quot;fas fa-video&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Recording
	&lt;/a&gt;
	

	
	  &lt;a href=&quot;/slides/19-fairvis-vast-slides.pdf&quot;&gt;
	    &lt;i class=&quot;fas fa-window-maximize&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Slides
	  &lt;/a&gt;
	

	

	
	  &lt;a href=&quot;https://github.com/poloclub/FairVis&quot;&gt;
	    &lt;i class=&quot;fas fa-code&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Code
	  &lt;/a&gt;
	

	

	

	
		
		
	

	

	
	
	&lt;/span&gt;







&lt;/p&gt;

&lt;!-- ## BibTeX
```

@article{cabrera2019fairvis,
  title={FairVis: Visual Analytics for Discovering Intersectional Bias in Machine Learning},
  author={Cabrera, {\'A}ngel and Epperson, Will, and Hohman, Fred and Kahng, Minsuk and Morgenstern, Jamie and Chau, Duen Horng},
  journal={IEEE Conference on Visual Analytics Science and Technology (VAST)},
  year={2019},
  publisher={IEEE}
  url={https://poloclub.github.io/FairVis/}
}

``` --&gt;</content><author><name></name></author><category term="papers" /><summary type="html"></summary></entry></feed>